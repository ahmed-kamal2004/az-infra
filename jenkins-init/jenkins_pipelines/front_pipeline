pipeline {
    agent {
        label 'docker_agent_template'
    }

    environment {
        DOCKER_IMAGE_NAME = 'ahmedkamal200427400/front-app'
        CONFIG_REPO = 'https://github.com/ahmed-kamal2004/kube-config-SW'
        IMAGE_CREATED = 'false'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Mazrof/front.git']])
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Check Code') {
            steps {
                sh 'npm run check'
            }
        }
        stage('Prepare Code for Deploy'){
            steps {
                withCredentials([string(credentialsId: 'SERVICE_ACCOUNT_KEY', variable: 'SERVICE_ACCOUNT_KEY')]) {
                    script {
                        writeFile file: "serviceAccountKey.json", text: "${SERVICE_ACCOUNT_KEY}"
                    }
                }
            }
        }
        stage('Build Image'){
            steps {
                script {

                    def fbuildNumber = (env.BUILD_NUMBER.toInteger() + 1000)
                        
                    def dockerTag = "${DOCKER_IMAGE_NAME}:build-${fbuildNumber}"
                        
                    def latestTag = "${DOCKER_IMAGE_NAME}:latest"


                    try {
                        sh "docker build -t ${dockerTag} ."
                        env.IMAGE_CREATED = "true"
                    }catch(Exception e){
                        env.IMAGE_CREATED = "false"
                        error("Docker image build failed.")
                    }

                    sh "docker tag ${dockerTag} ${latestTag}"
                }
            }
        }
        
        stage ('Push Image') {
            steps {
                
                withCredentials([usernamePassword(
                    credentialsId: 'Docker-Cred',
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]){
                    script {
                        
                        def fbuildNumber = (env.BUILD_NUMBER.toInteger() + 1000)
                        
                        def dockerTag = "${DOCKER_IMAGE_NAME}:build-${fbuildNumber}"
                        
                        def latestTag = "${DOCKER_IMAGE_NAME}:latest"
                        
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
                        sh "docker push ${dockerTag}"
                        
                        sh "docker push ${latestTag}"
                    }
                }
            }
        }

        stage('Deploy'){
            steps {
                
                script {

                    def fbuildNumber = (env.BUILD_NUMBER.toInteger() + 1000)    
                    def dockerTag = "${DOCKER_IMAGE_NAME}:build-${fbuildNumber}"
                    
                    
                    sh 'apt-get update && apt-get install -y netcat-traditional'
                    sh "timeout 4 nc -q 2 10.0.1.4 7770 | tee k | awk '/EOF/ {exit}'"
                    sh "git clone ${CONFIG_REPO}"


                    sh "kubectl --kubeconfig=k apply -f ./kube-config-SW/front-deploy.yaml --validate=false"


                    sh "kubectl --kubeconfig=k set image deployment/front-app front-container=${dockerTag}"

                }
            }
        }
    }

    post {
        success {
            echo "GAAAAAAMeed!!!!"
        }

        always {
            echo "Always!!!!"
            script {
                if(env.IMAGE_CREATED == "true"){
                    def fbuildNumber = (env.BUILD_NUMBER.toInteger() + 1000)    
                    def dockerTag = "${DOCKER_IMAGE_NAME}:build-${fbuildNumber}"
                    sh "docker image remove ${dockerTag} --force"
                }
            }
        }
    }
}
